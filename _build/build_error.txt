# === Step 1: Load and auto-increment version ===
$versionDatPath = "version.dat"
$versionLine = Get-Content $versionDatPath

# Parse format: YYYYMMDD_N
if ($versionLine -match "^(\d{8})_(\d+)$") {
    $date = $matches[1]
    $num = [int]$matches[2] + 1
    $newVersion = "$date" + "_" + $num.ToString()
} else {
    $date = (Get-Date -Format "yyyyMMdd")
    $newVersion = "${date}_1"
}
Set-Content $versionDatPath $newVersion
Write-Host "Version updated: $newVersion"

# === Step 2: Create version.txt from template ===
$versionTemplate = Get-Content "version_template.txt" -Raw
$datetimeNow = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
$gitTag = "v$newVersion"

$versionFinal = $versionTemplate `
    -replace "%%VERSION%%", $newVersion `
    -replace "%%DATETIME%%", $datetimeNow `
    -replace "%%GIT_TAG%%", $gitTag

Set-Content "version.txt" $versionFinal
Write-Host "Generated version.txt"

# === Step 3: Commit and tag in Git ===
git add .
git commit -m "Release $gitTag"
git tag $gitTag
git push
git push origin $gitTag
Write-Host "Git commit and tag created: $gitTag"

# === Step 4: Create ZIP package ===
$zipName = "rpcl3-$newVersion.zip"
Compress-Archive -Path @(
    "rpcl3.exe",
    "README.txt",
    "LICENSE",
    "games.db",
    "sqlite3.dll",
    "rpcl3.ini",
    "version.txt",
    "version.dat"
) -DestinationPath $zipName -Force
Write-Host "Created $zipName"

# === Step 5: Upload to GitHub (if gh CLI available) ===
if (Get-Command "gh" -ErrorAction SilentlyContinue) {
    gh release create $gitTag --title "$gitTag" --notes "Auto release on $datetimeNow" -p
    gh release upload $gitTag $zipName
    Write-Host "Uploaded to GitHub Release: $gitTag"
} else {
    Write-Warning "GitHub CLI (gh) not found. Skipping upload."
}
